# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'semantic'
require 'json'

default_platform(:android)

MANIFEST_LOCATION = "../app/src/main/AndroidManifest.xml"
RELEASE_LOCATION = "../../EXPO_RELEASE.json"

def upgrade_android_release
  releaseObject = JSON.parse(File.read(RELEASE_LOCATION))
  releaseObject["android"] += 1
  releaseNumber = releaseObject["android"]
  fileContents = File.read(MANIFEST_LOCATION)
  newContents = fileContents.gsub(/android-v\d+/, "android-v#{releaseNumber}")
  File.write(MANIFEST_LOCATION, newContents)
  File.write(RELEASE_LOCATION, releaseObject.to_json)
  system("git commit -am 'Update to release channel android-v#{releaseNumber}'")
end

VERSION_CODE_REGEX = /versionCode (\d+)/
VERSION_NAME_REGEX = /versionName "(.*)"/
BUILD_GRADLE_LOCATION = "../app/build.gradle"

def upgrade_gradle_codes
  buildContents = File.read(BUILD_GRADLE_LOCATION)
  versionCode = buildContents.match(VERSION_CODE_REGEX)[1].to_i
  versionCode += 1
  versionName = Semantic::Version.new buildContents.match(VERSION_NAME_REGEX)[1]
  versionName = versionName.patch!

  buildContents.gsub!(VERSION_CODE_REGEX, "versionCode #{versionCode}")
  buildContents.gsub!(VERSION_NAME_REGEX, "versionName \"#{versionName}\"")

  File.write(BUILD_GRADLE_LOCATION, buildContents)
end

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    ensure_git_status_clean

    upgrade_gradle_codes
    upgrade_android_release

    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end

  lane :expo_publish do
    ensure_git_status_clean

    Dir.chdir("../..") do
      releaseObject = JSON.parse(File.read('./EXPO_RELEASE.json'))
      releaseNumber = releaseObject['android']

      system("expo publish --release-channel android-v#{releaseNumber} --target bare", out: $stdout)
      # system("git checkout -- android/app/src/main/AndroidManifest.xml", out: $stdout)
    end
  end
end
